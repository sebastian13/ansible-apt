// {{ ansible_managed }}


// "Unattended-Upgrade::Allowed-Origins" and
// "Unattended-Upgrade::Origins-Pattern" control which packages get upgarded

// Origins-Pattern allows you to give a list of (glob-style) patterns to match against
// Use "origin=*" to allow all while respecting apt-pinning.
Unattended-Upgrade::Origins-Pattern {
{% for origin in apt_unattended_upgrades_origins %}
  "{{ origin }}";
{% endfor %}
};

// Only packages from this origin:archive pair will be installed.
// Variable substitution is supported for ${distro_id} that contains the output of lsb_release -i and ${distro_codename} that contains the output of lsb_release -c.
// (Default: "${distro_id}:${distro_codename}-security";)
Unattended-Upgrade::Allowed-Origins {
{% for allowed in apt_unattended_upgrades_allowed %}
  "{{ allowed }}";
{% endfor %}
};

// List of packages to not update (regexp are supported)
Unattended-Upgrade::Package-Blacklist {
{% for package in apt_unattended_upgrades_blacklist %}
  "{{ package }}";
{% endfor %}
};

// This option allows you to control if on a unclean dpkg exit
// unattended-upgrades will automatically run
//   dpkg --force-confold --configure -a
// The default is true, to ensure updates keep getting installed
//Unattended-Upgrade::AutoFixInterruptedDpkg "false";

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGUSR1. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
Unattended-Upgrade::MinimalSteps "{{ apt_unattended_upgrades_minimal_steps | to_nice_json }}";

// Install all unattended-upgrades when the machine is shuting down
// instead of doing it in the background while the machine is running
// This will (obviously) make shutdown slower
//Unattended-Upgrade::InstallOnShutdown "true";

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides
// 'mailx' must be installed. E.g. "user@example.com"
Unattended-Upgrade::Mail "{{ apt_mails | join(',') }}";

// Set this value to "true" to get emails only on errors. Default
// is to always send a mail if Unattended-Upgrade::Mail is set
Unattended-Upgrade::MailOnlyOnError "{{ apt_unattended_upgrades_notify_error_only | to_nice_json }}";

// By default "root" will be used as a sender, which can lead to a
// rejection of the email due to missing or wrong from field.
// Set this value to "user@example.com" or more descriptive to
// "Unattended-upgrades on Hostname <user@example.com>"
Unattended-Upgrade::Sender "{{ apt_unattended_upgrades_sender | default ('root') }}";

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
Unattended-Upgrade::Remove-Unused-Dependencies "{{ apt_unattended_upgrades_autoremove | to_nice_json }}";

// Automatically reboot *WITHOUT CONFIRMATION*
//  if the file /var/run/reboot-required is found after the upgrade
Unattended-Upgrade::Automatic-Reboot "{{ apt_unattended_upgrades_automatic_reboot | to_nice_json }}";

// Automatically reboot even if there are users currently logged in.
Unattended-Upgrade::Automatic-Reboot-WithUsers "{{ apt_unattended_upgrades_automatic_reboot_with_users | to_nice_json }}";

// If automatic reboot is enabled and needed, reboot at the specific
// time instead of immediately
//  Default: "now"
Unattended-Upgrade::Automatic-Reboot-Time "{{ apt_unattended_upgrades_automatic_reboot_time }}";

// Use apt bandwidth limit feature, this example limits the download
// speed to 70kb/sec
//Acquire::http::Dl-Limit "70";

// Enable logging to syslog. Default is False
Unattended-Upgrade::SyslogEnable "{{ apt_unattended_upgrades_syslog_enable | to_nice_json }}";

// Specify syslog facility. Default is daemon
Unattended-Upgrade::SyslogFacility "{{ apt_unattended_upgrades_syslog_facility }}";

{% if apt_dpkg_options %}
// Provide dpkg command-line options. E.g. to force conffile handling in dpkg
// like adding '--force-confold' to keep the old configuration files.
Dpkg::Options {"{{ apt_dpkg_options | join(';') }}"};
{% endif %}
